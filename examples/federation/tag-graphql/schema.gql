# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type TodoItem {
  id: ID!
  tagTodoItems(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TagTodoItemFilter! = {}

    """Specify to sort results."""
    sorting: [TagTodoItemSort!]! = []
  ): TodoItemTagTodoItemsConnection!
}

input CursorPaging {
  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input TagTodoItemFilter {
  and: [TagTodoItemFilter!]
  or: [TagTodoItemFilter!]
  tagId: IDFilterComparison
  todoItemId: IDFilterComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  contains: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input TagTodoItemSort {
  field: TagTodoItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TagTodoItemSortFields {
  tagId
  todoItemId
  created
  updated
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

type TagTodoItem {
  tagId: ID!
  todoItemId: ID!
  created: DateTime!
  updated: DateTime!
  todoItem: TodoItem!
  tag: Tag!
}

type Tag {
  id: ID!
  name: String!
  created: DateTime!
  updated: DateTime!
  tagTodoItems(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TagTodoItemFilter! = {}

    """Specify to sort results."""
    sorting: [TagTodoItemSort!]! = []
  ): TagTagTodoItemsConnection!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

type TagDeleteResponse {
  id: ID
  name: String
  created: DateTime
  updated: DateTime
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

type TagEdge {
  """The node containing the Tag"""
  node: Tag!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type PageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor

  """The cursor of the last returned record."""
  endCursor: ConnectionCursor
}

type TagConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TagEdge!]!
}

type TagTodoItemEdge {
  """The node containing the TagTodoItem"""
  node: TagTodoItem!

  """Cursor for this node."""
  cursor: ConnectionCursor!
}

type TagTagTodoItemsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TagTodoItemEdge!]!
}

type TagTodoItemDeleteResponse {
  tagId: ID
  todoItemId: ID
  created: DateTime
  updated: DateTime
}

type TagTodoItemConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TagTodoItemEdge!]!
}

type TodoItemTagTodoItemsConnection {
  """Paging information"""
  pageInfo: PageInfo!

  """Array of edges."""
  edges: [TagTodoItemEdge!]!
}

type Query {
  tag(
    """The id of the record to find."""
    id: ID!
  ): Tag!
  tags(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TagFilter! = {}

    """Specify to sort results."""
    sorting: [TagSort!]! = []
  ): TagConnection!
  tagTodoItem(
    """The id of the record to find."""
    id: ID!
  ): TagTodoItem!
  tagTodoItems(
    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to filter the records returned."""
    filter: TagTodoItemFilter! = {}

    """Specify to sort results."""
    sorting: [TagTodoItemSort!]! = []
  ): TagTodoItemConnection!
}

input TagFilter {
  and: [TagFilter!]
  or: [TagFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

input TagSort {
  field: TagSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TagSortFields {
  id
  name
  created
  updated
}

type Mutation {
  createOneTag(input: CreateOneTagInput!): Tag!
  createManyTags(input: CreateManyTagsInput!): [Tag!]!
  updateOneTag(input: UpdateOneTagInput!): Tag!
  updateManyTags(input: UpdateManyTagsInput!): UpdateManyResponse!
  deleteOneTag(input: DeleteOneTagInput!): TagDeleteResponse!
  deleteManyTags(input: DeleteManyTagsInput!): DeleteManyResponse!
  createOneTagTodoItem(input: CreateOneTagTodoItemInput!): TagTodoItem!
  createManyTagTodoItems(input: CreateManyTagTodoItemsInput!): [TagTodoItem!]!
  updateOneTagTodoItem(input: UpdateOneTagTodoItemInput!): TagTodoItem!
  updateManyTagTodoItems(input: UpdateManyTagTodoItemsInput!): UpdateManyResponse!
  deleteOneTagTodoItem(input: DeleteOneTagTodoItemInput!): TagTodoItemDeleteResponse!
  deleteManyTagTodoItems(input: DeleteManyTagTodoItemsInput!): DeleteManyResponse!
}

input CreateOneTagInput {
  """The record to create"""
  tag: TagInput!
}

input TagInput {
  name: String!
}

input CreateManyTagsInput {
  """Array of records to create"""
  tags: [TagInput!]!
}

input UpdateOneTagInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TagInput!
}

input UpdateManyTagsInput {
  """Filter used to find fields to update"""
  filter: TagUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: TagInput!
}

input TagUpdateFilter {
  and: [TagUpdateFilter!]
  or: [TagUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

input DeleteOneTagInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTagsInput {
  """Filter to find records to delete"""
  filter: TagDeleteFilter!
}

input TagDeleteFilter {
  and: [TagDeleteFilter!]
  or: [TagDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

input CreateOneTagTodoItemInput {
  """The record to create"""
  tagTodoItem: TagTodoItemInput!
}

input TagTodoItemInput {
  tagId: Float!
  todoItemId: Float!
}

input CreateManyTagTodoItemsInput {
  """Array of records to create"""
  tagTodoItems: [TagTodoItemInput!]!
}

input UpdateOneTagTodoItemInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TagTodoItemInput!
}

input UpdateManyTagTodoItemsInput {
  """Filter used to find fields to update"""
  filter: TagTodoItemUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: TagTodoItemInput!
}

input TagTodoItemUpdateFilter {
  and: [TagTodoItemUpdateFilter!]
  or: [TagTodoItemUpdateFilter!]
  tagId: IDFilterComparison
  todoItemId: IDFilterComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

input DeleteOneTagTodoItemInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteManyTagTodoItemsInput {
  """Filter to find records to delete"""
  filter: TagTodoItemDeleteFilter!
}

input TagTodoItemDeleteFilter {
  and: [TagTodoItemDeleteFilter!]
  or: [TagTodoItemDeleteFilter!]
  tagId: IDFilterComparison
  todoItemId: IDFilterComparison
  created: DateFieldComparison
  updated: DateFieldComparison
}

scalar link__Import